// Generated by CoffeeScript 1.4.0
(function() {
  var BlipPlotter, PlotArea, Radar;

  BlipPlotter = (function() {

    function BlipPlotter(container, canvasSize, blips) {
      this.container = container;
      this.canvasSize = canvasSize;
      this.blips = blips;
    }

    BlipPlotter.prototype.plotBlips = function() {
      var _this = this;
      return this.container.selectAll("svg").data(this.blips).enter().append("path").attr("transform", function(blip) {
        return _this.transform(blip);
      }).attr("d", d3.svg.symbol().type(function(blip) {
        return _this.symbolForBlip(blip);
      })).attr("class", function(blip) {
        return blip.movement;
      }).attr("description", function(blip) {
        return blip.tip;
      });
    };

    BlipPlotter.prototype.transform = function(blip) {
      var coOrdinates;
      coOrdinates = this.polarToCartesian(blip.pc);
      return "translate(" + coOrdinates.x + "," + coOrdinates.y + ")";
    };

    BlipPlotter.prototype.symbolForBlip = function(blip) {
      switch (blip.movement) {
        case "c":
          return "circle";
        case "t":
          return "triangle-up";
        default:
          return console.log("Unknown movement for blip: " + blip.movement);
      }
    };

    BlipPlotter.prototype.polarToCartesian = function(polar) {
      var x, y;
      x = (polar.r * Math.cos(polar.t)) + this.canvasSize / 2;
      y = (polar.r * Math.sin(polar.t)) + this.canvasSize / 2;
      return {
        "x": x,
        "y": y
      };
    };

    return BlipPlotter;

  })();

  PlotArea = (function() {

    function PlotArea(container, canvasSize, arcs) {
      this.container = container;
      this.canvasSize = canvasSize;
      this.arcs = arcs;
      this.drawAxis();
      this.drawRings();
    }

    PlotArea.prototype.drawRings = function() {
      var arc, _i, _len, _ref, _results;
      _ref = this.arcs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arc = _ref[_i];
        _results.push(this.drawCircle(arc.r, this.canvasSize / 2, this.canvasSize / 2));
      }
      return _results;
    };

    PlotArea.prototype.drawAxis = function() {
      this.drawLine(this.canvasSize / 2, 0, this.canvasSize / 2, this.canvasSize);
      return this.drawLine(0, this.canvasSize / 2, this.canvasSize, this.canvasSize / 2);
    };

    PlotArea.prototype.drawCircle = function(radius, cx, cy) {
      return this.container.append("circle").attr("r", radius).attr("cx", cx).attr("cy", cy).attr("class", "ring");
    };

    PlotArea.prototype.drawLine = function(x1, y1, x2, y2) {
      return this.container.append("line").attr("x1", x1).attr("y1", y1).attr("x2", x2).attr("y2", y2).attr("class", "axis");
    };

    return PlotArea;

  })();

  Radar = (function() {

    function Radar(canvasSize) {
      this.canvasSize = canvasSize;
    }

    Radar.prototype.init = function() {
      var blipPlotter, container, plotArea;
      container = d3.select("#radar").append("svg").attr("width", this.canvasSize).attr("height", this.canvasSize).on("mousemove", self.mouseMove);
      plotArea = new PlotArea(container, this.canvasSize, radarArcs);
      blipPlotter = new BlipPlotter(container, this.canvasSize, radarData);
      return blipPlotter.plotBlips();
    };

    return Radar;

  })();

  window.onload = function() {
    var canvasSize, radar;
    canvasSize = 820;
    radar = new Radar(canvasSize);
    return radar.init();
  };

}).call(this);
